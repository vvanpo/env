#!/usr/bin/env bash

repo=github.com/vvanpo/env

cd
config_file="$(mktemp)"

function config {
    git config -f "$config_file" $@
}

function get-config {
    local val="$(config --get "$1")"
    local isset="$(config --name-only -l | grep "$1")"

    if [[ -z $isset ]]; then
        echo -n "$2"
        [[ -n $3 ]] && echo -n " [$3]"
        echo -n ': '
        read val
        val="${val:-$3}"
        config --add "$1" "$val"
    fi

    echo "$val"
}

# Creates the env directory. The prefix argument represents the root of a local
# installation hierarchy, mimicking the structure of /usr.
# Installs the config file if it doesn't exist.
function mk-env {
    # Strip tilde expansion, as it's not required for linking.
    local prefix="${1/#~\//}"
    mkdir -p "$prefix/etc"
    config_file="$prefix/etc/envconfig"
    touch "$config_file"
    config --add env.prefix "$1"

    # If the prefix is not $HOME or /, add a trailing slash if it is missing.
    if [[ -n $prefix ]] && [[ $prefix != */ ]]; then
        prefix="$prefix/"
    fi

    local env="${prefix}src/$repo"
    mkdir -p "$env"
    echo "$env"
}

# Pull down a given repo, cloning it if it doesn't exist.
function pull-repo {
    if [[ -f $1/.git/config ]]; then
        local remote=$(git config -f .git/config --get remote.origin.url | grep "$repo.git")
        if [[ -z $remote ]]; then
            2>&1 echo 'The repository exists, but does not point to the correct origin.'
            exit 1
        fi

        git checkout -q master
        git pull -q
    else
        (set -x; git clone "https://$1.git" .)
    fi
}

prefix="$(get-config local.directory 'Local installation hierarchy' '~/.local')"
env="$(mk-env "$prefix")"
name="$(get-config user.name 'Full name')"
email="$(get-config user.email 'E-mail')"

(cd "$env"; pull-repo "$repo"; >/dev/null cd -)

$env/install "$name" "$email" "$prefix"

>/dev/null cd -
