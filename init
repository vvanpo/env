#!/usr/bin/env bash

name='env'
repo="github.com/vvanpo/$name"
default_prefix='~/.local'

function get-config {
    [[ -f $prefix/etc/${name}config ]] || return
    echo "$(git config -f "$prefix/etc/${name}config" --get "$1")"
}

function set-config {
    # Git will error on invalid files.
    if [[ ! -f $prefix/etc/${name}config ]]; then
        mkdir -p "$prefix/etc"
        touch "$prefix/etc/${name}config"
    fi

    git config -f "$prefix/etc/${name}config" --add "$1" "$2"
}

# Reads an input value if the requested config value isn't set.
function read-config {
    if [[ -z $(git config -f "$prefix/etc/${name}config" --name-only -l | grep "$1") ]]; then
        local value
        printf '%s%s%s' "$2" "$([[ -n $3 ]] && echo " [$3]")" ': '
        read value
        value="${value:-$3}"
        set-config "$1" "$value"
    fi
}

# Sets a global $prefix variable.
function set-prefix {
    echo -n "Local installation hierarchy [$default_prefix]: "
    read prefix
    prefix="${prefix:-$default_prefix}"
    # Perform tilde expansion as it won't be expanded automatically in a quoted
    # string.
    prefix="${prefix/#~/$HOME}"
    # Resolve path.
    prefix="$(realpath -ms "$prefix")"
}

# Pull down the repo, cloning it if it doesn't exist.
function pull-repo {
    local path="$prefix/src/$repo"
    if [[ -d $path/.git ]]; then
        local remote=$(git -C $path config --get remote.origin.url | grep "$repo.git")
        if [[ -z $remote ]]; then
            2>&1 echo 'The repository exists, but does not point to the correct origin.'
            exit 1
        fi

        git -C "$path" checkout -q master
        git -C "$path" pull
    else
        (set -x; git clone "https://$repo.git" "$path")
    fi
}

# The '-s' flag is passed when this script is sourced, implying nothing should
# be run.
if [[ $1 != '-s' ]]; then
    set-prefix
    pull-repo
    $prefix/src/$repo/install "$prefix"
fi
